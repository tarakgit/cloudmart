"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var index_exports = {};
__export(index_exports, {
  AttributeValue: () => AttributeValue,
  DescribeStreamCommand: () => DescribeStreamCommand,
  DynamoDBStreams: () => DynamoDBStreams,
  DynamoDBStreamsClient: () => DynamoDBStreamsClient,
  DynamoDBStreamsServiceException: () => DynamoDBStreamsServiceException,
  ExpiredIteratorException: () => ExpiredIteratorException,
  GetRecordsCommand: () => GetRecordsCommand,
  GetShardIteratorCommand: () => GetShardIteratorCommand,
  InternalServerError: () => InternalServerError,
  KeyType: () => KeyType,
  LimitExceededException: () => LimitExceededException,
  ListStreamsCommand: () => ListStreamsCommand,
  OperationType: () => OperationType,
  ResourceNotFoundException: () => ResourceNotFoundException,
  ShardIteratorType: () => ShardIteratorType,
  StreamStatus: () => StreamStatus,
  StreamViewType: () => StreamViewType,
  TrimmedDataAccessException: () => TrimmedDataAccessException,
  __Client: () => import_smithy_client.Client
});
module.exports = __toCommonJS(index_exports);

// src/DynamoDBStreamsClient.ts
var import_middleware_host_header = require("@aws-sdk/middleware-host-header");
var import_middleware_logger = require("@aws-sdk/middleware-logger");
var import_middleware_recursion_detection = require("@aws-sdk/middleware-recursion-detection");
var import_middleware_user_agent = require("@aws-sdk/middleware-user-agent");
var import_config_resolver = require("@smithy/config-resolver");
var import_core = require("@smithy/core");
var import_middleware_content_length = require("@smithy/middleware-content-length");
var import_middleware_endpoint = require("@smithy/middleware-endpoint");
var import_middleware_retry = require("@smithy/middleware-retry");

var import_httpAuthSchemeProvider = require("./auth/httpAuthSchemeProvider");

// src/endpoint/EndpointParameters.ts
var resolveClientEndpointParameters = /* @__PURE__ */ __name((options) => {
  return Object.assign(options, {
    useDualstackEndpoint: options.useDualstackEndpoint ?? false,
    useFipsEndpoint: options.useFipsEndpoint ?? false,
    defaultSigningName: "dynamodb"
  });
}, "resolveClientEndpointParameters");
var commonParams = {
  UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
  Endpoint: { type: "builtInParams", name: "endpoint" },
  Region: { type: "builtInParams", name: "region" },
  UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
};

// src/DynamoDBStreamsClient.ts
var import_runtimeConfig = require("././runtimeConfig");

// src/runtimeExtensions.ts
var import_region_config_resolver = require("@aws-sdk/region-config-resolver");
var import_protocol_http = require("@smithy/protocol-http");
var import_smithy_client = require("@smithy/smithy-client");

// src/auth/httpAuthExtensionConfiguration.ts
var getHttpAuthExtensionConfiguration = /* @__PURE__ */ __name((runtimeConfig) => {
  const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;
  let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;
  let _credentials = runtimeConfig.credentials;
  return {
    setHttpAuthScheme(httpAuthScheme) {
      const index = _httpAuthSchemes.findIndex((scheme) => scheme.schemeId === httpAuthScheme.schemeId);
      if (index === -1) {
        _httpAuthSchemes.push(httpAuthScheme);
      } else {
        _httpAuthSchemes.splice(index, 1, httpAuthScheme);
      }
    },
    httpAuthSchemes() {
      return _httpAuthSchemes;
    },
    setHttpAuthSchemeProvider(httpAuthSchemeProvider) {
      _httpAuthSchemeProvider = httpAuthSchemeProvider;
    },
    httpAuthSchemeProvider() {
      return _httpAuthSchemeProvider;
    },
    setCredentials(credentials) {
      _credentials = credentials;
    },
    credentials() {
      return _credentials;
    }
  };
}, "getHttpAuthExtensionConfiguration");
var resolveHttpAuthRuntimeConfig = /* @__PURE__ */ __name((config) => {
  return {
    httpAuthSchemes: config.httpAuthSchemes(),
    httpAuthSchemeProvider: config.httpAuthSchemeProvider(),
    credentials: config.credentials()
  };
}, "resolveHttpAuthRuntimeConfig");

// src/runtimeExtensions.ts
var resolveRuntimeExtensions = /* @__PURE__ */ __name((runtimeConfig, extensions) => {
  const extensionConfiguration = Object.assign(
    (0, import_region_config_resolver.getAwsRegionExtensionConfiguration)(runtimeConfig),
    (0, import_smithy_client.getDefaultExtensionConfiguration)(runtimeConfig),
    (0, import_protocol_http.getHttpHandlerExtensionConfiguration)(runtimeConfig),
    getHttpAuthExtensionConfiguration(runtimeConfig)
  );
  extensions.forEach((extension) => extension.configure(extensionConfiguration));
  return Object.assign(
    runtimeConfig,
    (0, import_region_config_resolver.resolveAwsRegionExtensionConfiguration)(extensionConfiguration),
    (0, import_smithy_client.resolveDefaultRuntimeConfig)(extensionConfiguration),
    (0, import_protocol_http.resolveHttpHandlerRuntimeConfig)(extensionConfiguration),
    resolveHttpAuthRuntimeConfig(extensionConfiguration)
  );
}, "resolveRuntimeExtensions");

// src/DynamoDBStreamsClient.ts
var DynamoDBStreamsClient = class extends import_smithy_client.Client {
  static {
    __name(this, "DynamoDBStreamsClient");
  }
  /**
   * The resolved configuration of DynamoDBStreamsClient class. This is resolved and normalized from the {@link DynamoDBStreamsClientConfig | constructor configuration interface}.
   */
  config;
  constructor(...[configuration]) {
    const _config_0 = (0, import_runtimeConfig.getRuntimeConfig)(configuration || {});
    super(_config_0);
    this.initConfig = _config_0;
    const _config_1 = resolveClientEndpointParameters(_config_0);
    const _config_2 = (0, import_middleware_user_agent.resolveUserAgentConfig)(_config_1);
    const _config_3 = (0, import_middleware_retry.resolveRetryConfig)(_config_2);
    const _config_4 = (0, import_config_resolver.resolveRegionConfig)(_config_3);
    const _config_5 = (0, import_middleware_host_header.resolveHostHeaderConfig)(_config_4);
    const _config_6 = (0, import_middleware_endpoint.resolveEndpointConfig)(_config_5);
    const _config_7 = (0, import_httpAuthSchemeProvider.resolveHttpAuthSchemeConfig)(_config_6);
    const _config_8 = resolveRuntimeExtensions(_config_7, configuration?.extensions || []);
    this.config = _config_8;
    this.middlewareStack.use((0, import_middleware_user_agent.getUserAgentPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_retry.getRetryPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_content_length.getContentLengthPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_host_header.getHostHeaderPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_logger.getLoggerPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_recursion_detection.getRecursionDetectionPlugin)(this.config));
    this.middlewareStack.use(
      (0, import_core.getHttpAuthSchemeEndpointRuleSetPlugin)(this.config, {
        httpAuthSchemeParametersProvider: import_httpAuthSchemeProvider.defaultDynamoDBStreamsHttpAuthSchemeParametersProvider,
        identityProviderConfigProvider: /* @__PURE__ */ __name(async (config) => new import_core.DefaultIdentityProviderConfig({
          "aws.auth#sigv4": config.credentials
        }), "identityProviderConfigProvider")
      })
    );
    this.middlewareStack.use((0, import_core.getHttpSigningPlugin)(this.config));
  }
  /**
   * Destroy underlying resources, like sockets. It's usually not necessary to do this.
   * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
   * Otherwise, sockets might stay open for quite a long time before the server terminates them.
   */
  destroy() {
    super.destroy();
  }
};

// src/DynamoDBStreams.ts


// src/commands/DescribeStreamCommand.ts

var import_middleware_serde = require("@smithy/middleware-serde");


// src/protocols/Aws_json1_0.ts
var import_core2 = require("@aws-sdk/core");



// src/models/DynamoDBStreamsServiceException.ts

var DynamoDBStreamsServiceException = class _DynamoDBStreamsServiceException extends import_smithy_client.ServiceException {
  static {
    __name(this, "DynamoDBStreamsServiceException");
  }
  /**
   * @internal
   */
  constructor(options) {
    super(options);
    Object.setPrototypeOf(this, _DynamoDBStreamsServiceException.prototype);
  }
};

// src/models/models_0.ts
var KeyType = {
  HASH: "HASH",
  RANGE: "RANGE"
};
var StreamStatus = {
  DISABLED: "DISABLED",
  DISABLING: "DISABLING",
  ENABLED: "ENABLED",
  ENABLING: "ENABLING"
};
var StreamViewType = {
  KEYS_ONLY: "KEYS_ONLY",
  NEW_AND_OLD_IMAGES: "NEW_AND_OLD_IMAGES",
  NEW_IMAGE: "NEW_IMAGE",
  OLD_IMAGE: "OLD_IMAGE"
};
var InternalServerError = class _InternalServerError extends DynamoDBStreamsServiceException {
  static {
    __name(this, "InternalServerError");
  }
  name = "InternalServerError";
  $fault = "server";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "InternalServerError",
      $fault: "server",
      ...opts
    });
    Object.setPrototypeOf(this, _InternalServerError.prototype);
  }
};
var ResourceNotFoundException = class _ResourceNotFoundException extends DynamoDBStreamsServiceException {
  static {
    __name(this, "ResourceNotFoundException");
  }
  name = "ResourceNotFoundException";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "ResourceNotFoundException",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _ResourceNotFoundException.prototype);
  }
};
var ExpiredIteratorException = class _ExpiredIteratorException extends DynamoDBStreamsServiceException {
  static {
    __name(this, "ExpiredIteratorException");
  }
  name = "ExpiredIteratorException";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "ExpiredIteratorException",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _ExpiredIteratorException.prototype);
  }
};
var OperationType = {
  INSERT: "INSERT",
  MODIFY: "MODIFY",
  REMOVE: "REMOVE"
};
var LimitExceededException = class _LimitExceededException extends DynamoDBStreamsServiceException {
  static {
    __name(this, "LimitExceededException");
  }
  name = "LimitExceededException";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "LimitExceededException",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _LimitExceededException.prototype);
  }
};
var TrimmedDataAccessException = class _TrimmedDataAccessException extends DynamoDBStreamsServiceException {
  static {
    __name(this, "TrimmedDataAccessException");
  }
  name = "TrimmedDataAccessException";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "TrimmedDataAccessException",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _TrimmedDataAccessException.prototype);
  }
};
var ShardIteratorType = {
  AFTER_SEQUENCE_NUMBER: "AFTER_SEQUENCE_NUMBER",
  AT_SEQUENCE_NUMBER: "AT_SEQUENCE_NUMBER",
  LATEST: "LATEST",
  TRIM_HORIZON: "TRIM_HORIZON"
};
var AttributeValue;
((AttributeValue3) => {
  AttributeValue3.visit = /* @__PURE__ */ __name((value, visitor) => {
    if (value.S !== void 0) return visitor.S(value.S);
    if (value.N !== void 0) return visitor.N(value.N);
    if (value.B !== void 0) return visitor.B(value.B);
    if (value.SS !== void 0) return visitor.SS(value.SS);
    if (value.NS !== void 0) return visitor.NS(value.NS);
    if (value.BS !== void 0) return visitor.BS(value.BS);
    if (value.M !== void 0) return visitor.M(value.M);
    if (value.L !== void 0) return visitor.L(value.L);
    if (value.NULL !== void 0) return visitor.NULL(value.NULL);
    if (value.BOOL !== void 0) return visitor.BOOL(value.BOOL);
    return visitor._(value.$unknown[0], value.$unknown[1]);
  }, "visit");
})(AttributeValue || (AttributeValue = {}));

// src/protocols/Aws_json1_0.ts
var se_DescribeStreamCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = sharedHeaders("DescribeStream");
  let body;
  body = JSON.stringify((0, import_smithy_client._json)(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_DescribeStreamCommand");
var se_GetRecordsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = sharedHeaders("GetRecords");
  let body;
  body = JSON.stringify((0, import_smithy_client._json)(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_GetRecordsCommand");
var se_GetShardIteratorCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = sharedHeaders("GetShardIterator");
  let body;
  body = JSON.stringify((0, import_smithy_client._json)(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_GetShardIteratorCommand");
var se_ListStreamsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = sharedHeaders("ListStreams");
  let body;
  body = JSON.stringify((0, import_smithy_client._json)(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_ListStreamsCommand");
var de_DescribeStreamCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseJsonBody)(output.body, context);
  let contents = {};
  contents = de_DescribeStreamOutput(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_DescribeStreamCommand");
var de_GetRecordsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseJsonBody)(output.body, context);
  let contents = {};
  contents = de_GetRecordsOutput(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_GetRecordsCommand");
var de_GetShardIteratorCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseJsonBody)(output.body, context);
  let contents = {};
  contents = (0, import_smithy_client._json)(data);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_GetShardIteratorCommand");
var de_ListStreamsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseJsonBody)(output.body, context);
  let contents = {};
  contents = (0, import_smithy_client._json)(data);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_ListStreamsCommand");
var de_CommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await (0, import_core2.parseJsonErrorBody)(output.body, context)
  };
  const errorCode = (0, import_core2.loadRestJsonErrorCode)(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalServerError":
    case "com.amazonaws.dynamodbstreams#InternalServerError":
      throw await de_InternalServerErrorRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.dynamodbstreams#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ExpiredIteratorException":
    case "com.amazonaws.dynamodbstreams#ExpiredIteratorException":
      throw await de_ExpiredIteratorExceptionRes(parsedOutput, context);
    case "LimitExceededException":
    case "com.amazonaws.dynamodbstreams#LimitExceededException":
      throw await de_LimitExceededExceptionRes(parsedOutput, context);
    case "TrimmedDataAccessException":
    case "com.amazonaws.dynamodbstreams#TrimmedDataAccessException":
      throw await de_TrimmedDataAccessExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_CommandError");
var de_ExpiredIteratorExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = (0, import_smithy_client._json)(body);
  const exception = new ExpiredIteratorException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_ExpiredIteratorExceptionRes");
var de_InternalServerErrorRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = (0, import_smithy_client._json)(body);
  const exception = new InternalServerError({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_InternalServerErrorRes");
var de_LimitExceededExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = (0, import_smithy_client._json)(body);
  const exception = new LimitExceededException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_LimitExceededExceptionRes");
var de_ResourceNotFoundExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = (0, import_smithy_client._json)(body);
  const exception = new ResourceNotFoundException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_ResourceNotFoundExceptionRes");
var de_TrimmedDataAccessExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = (0, import_smithy_client._json)(body);
  const exception = new TrimmedDataAccessException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_TrimmedDataAccessExceptionRes");
var de_AttributeMap = /* @__PURE__ */ __name((output, context) => {
  return Object.entries(output).reduce((acc, [key, value]) => {
    if (value === null) {
      return acc;
    }
    acc[key] = de_AttributeValue((0, import_core2.awsExpectUnion)(value), context);
    return acc;
  }, {});
}, "de_AttributeMap");
var de_AttributeValue = /* @__PURE__ */ __name((output, context) => {
  if (output.B != null) {
    return {
      B: context.base64Decoder(output.B)
    };
  }
  if ((0, import_smithy_client.expectBoolean)(output.BOOL) !== void 0) {
    return { BOOL: (0, import_smithy_client.expectBoolean)(output.BOOL) };
  }
  if (output.BS != null) {
    return {
      BS: de_BinarySetAttributeValue(output.BS, context)
    };
  }
  if (output.L != null) {
    return {
      L: de_ListAttributeValue(output.L, context)
    };
  }
  if (output.M != null) {
    return {
      M: de_MapAttributeValue(output.M, context)
    };
  }
  if ((0, import_smithy_client.expectString)(output.N) !== void 0) {
    return { N: (0, import_smithy_client.expectString)(output.N) };
  }
  if (output.NS != null) {
    return {
      NS: (0, import_smithy_client._json)(output.NS)
    };
  }
  if ((0, import_smithy_client.expectBoolean)(output.NULL) !== void 0) {
    return { NULL: (0, import_smithy_client.expectBoolean)(output.NULL) };
  }
  if ((0, import_smithy_client.expectString)(output.S) !== void 0) {
    return { S: (0, import_smithy_client.expectString)(output.S) };
  }
  if (output.SS != null) {
    return {
      SS: (0, import_smithy_client._json)(output.SS)
    };
  }
  return { $unknown: Object.entries(output)[0] };
}, "de_AttributeValue");
var de_BinarySetAttributeValue = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return context.base64Decoder(entry);
  });
  return retVal;
}, "de_BinarySetAttributeValue");
var de_DescribeStreamOutput = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    StreamDescription: /* @__PURE__ */ __name((_) => de_StreamDescription(_, context), "StreamDescription")
  });
}, "de_DescribeStreamOutput");
var de_GetRecordsOutput = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    NextShardIterator: import_smithy_client.expectString,
    Records: /* @__PURE__ */ __name((_) => de_RecordList(_, context), "Records")
  });
}, "de_GetRecordsOutput");
var de_ListAttributeValue = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_AttributeValue((0, import_core2.awsExpectUnion)(entry), context);
  });
  return retVal;
}, "de_ListAttributeValue");
var de_MapAttributeValue = /* @__PURE__ */ __name((output, context) => {
  return Object.entries(output).reduce((acc, [key, value]) => {
    if (value === null) {
      return acc;
    }
    acc[key] = de_AttributeValue((0, import_core2.awsExpectUnion)(value), context);
    return acc;
  }, {});
}, "de_MapAttributeValue");
var de__Record = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    awsRegion: import_smithy_client.expectString,
    dynamodb: /* @__PURE__ */ __name((_) => de_StreamRecord(_, context), "dynamodb"),
    eventID: import_smithy_client.expectString,
    eventName: import_smithy_client.expectString,
    eventSource: import_smithy_client.expectString,
    eventVersion: import_smithy_client.expectString,
    userIdentity: import_smithy_client._json
  });
}, "de__Record");
var de_RecordList = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de__Record(entry, context);
  });
  return retVal;
}, "de_RecordList");
var de_StreamDescription = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    CreationRequestDateTime: /* @__PURE__ */ __name((_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))), "CreationRequestDateTime"),
    KeySchema: import_smithy_client._json,
    LastEvaluatedShardId: import_smithy_client.expectString,
    Shards: import_smithy_client._json,
    StreamArn: import_smithy_client.expectString,
    StreamLabel: import_smithy_client.expectString,
    StreamStatus: import_smithy_client.expectString,
    StreamViewType: import_smithy_client.expectString,
    TableName: import_smithy_client.expectString
  });
}, "de_StreamDescription");
var de_StreamRecord = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    ApproximateCreationDateTime: /* @__PURE__ */ __name((_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))), "ApproximateCreationDateTime"),
    Keys: /* @__PURE__ */ __name((_) => de_AttributeMap(_, context), "Keys"),
    NewImage: /* @__PURE__ */ __name((_) => de_AttributeMap(_, context), "NewImage"),
    OldImage: /* @__PURE__ */ __name((_) => de_AttributeMap(_, context), "OldImage"),
    SequenceNumber: import_smithy_client.expectString,
    SizeBytes: import_smithy_client.expectLong,
    StreamViewType: import_smithy_client.expectString
  });
}, "de_StreamRecord");
var deserializeMetadata = /* @__PURE__ */ __name((output) => ({
  httpStatusCode: output.statusCode,
  requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
  extendedRequestId: output.headers["x-amz-id-2"],
  cfId: output.headers["x-amz-cf-id"]
}), "deserializeMetadata");
var throwDefaultError = (0, import_smithy_client.withBaseException)(DynamoDBStreamsServiceException);
var buildHttpRpcRequest = /* @__PURE__ */ __name(async (context, headers, path, resolvedHostname, body) => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const contents = {
    protocol,
    hostname,
    port,
    method: "POST",
    path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
    headers
  };
  if (resolvedHostname !== void 0) {
    contents.hostname = resolvedHostname;
  }
  if (body !== void 0) {
    contents.body = body;
  }
  return new import_protocol_http.HttpRequest(contents);
}, "buildHttpRpcRequest");
function sharedHeaders(operation) {
  return {
    "content-type": "application/x-amz-json-1.0",
    "x-amz-target": `DynamoDBStreams_20120810.${operation}`
  };
}
__name(sharedHeaders, "sharedHeaders");

// src/commands/DescribeStreamCommand.ts
var DescribeStreamCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("DynamoDBStreams_20120810", "DescribeStream", {}).n("DynamoDBStreamsClient", "DescribeStreamCommand").f(void 0, void 0).ser(se_DescribeStreamCommand).de(de_DescribeStreamCommand).build() {
  static {
    __name(this, "DescribeStreamCommand");
  }
};

// src/commands/GetRecordsCommand.ts



var GetRecordsCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("DynamoDBStreams_20120810", "GetRecords", {}).n("DynamoDBStreamsClient", "GetRecordsCommand").f(void 0, void 0).ser(se_GetRecordsCommand).de(de_GetRecordsCommand).build() {
  static {
    __name(this, "GetRecordsCommand");
  }
};

// src/commands/GetShardIteratorCommand.ts



var GetShardIteratorCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("DynamoDBStreams_20120810", "GetShardIterator", {}).n("DynamoDBStreamsClient", "GetShardIteratorCommand").f(void 0, void 0).ser(se_GetShardIteratorCommand).de(de_GetShardIteratorCommand).build() {
  static {
    __name(this, "GetShardIteratorCommand");
  }
};

// src/commands/ListStreamsCommand.ts



var ListStreamsCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("DynamoDBStreams_20120810", "ListStreams", {}).n("DynamoDBStreamsClient", "ListStreamsCommand").f(void 0, void 0).ser(se_ListStreamsCommand).de(de_ListStreamsCommand).build() {
  static {
    __name(this, "ListStreamsCommand");
  }
};

// src/DynamoDBStreams.ts
var commands = {
  DescribeStreamCommand,
  GetRecordsCommand,
  GetShardIteratorCommand,
  ListStreamsCommand
};
var DynamoDBStreams = class extends DynamoDBStreamsClient {
  static {
    __name(this, "DynamoDBStreams");
  }
};
(0, import_smithy_client.createAggregatedClient)(commands, DynamoDBStreams);
// Annotate the CommonJS export names for ESM import in node:

0 && (module.exports = {
  DynamoDBStreamsServiceException,
  __Client,
  DynamoDBStreamsClient,
  DynamoDBStreams,
  $Command,
  DescribeStreamCommand,
  GetRecordsCommand,
  GetShardIteratorCommand,
  ListStreamsCommand,
  KeyType,
  StreamStatus,
  StreamViewType,
  InternalServerError,
  ResourceNotFoundException,
  ExpiredIteratorException,
  OperationType,
  LimitExceededException,
  TrimmedDataAccessException,
  ShardIteratorType,
  AttributeValue
});

